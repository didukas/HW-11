class AVLNode:
    def __init__(self, key):
        self.key = key
        self.left = None
        self.right = None
        self.height = 1

class AVLTree:
    def __init__(self):
        self.root = None

    def insert(self, key):
        if not self.root:
            self.root = AVLNode(key)
        else:
            self.root = self._insert(self.root, key)

    def _insert(self, node, key):
        if not node:
            return AVLNode(key)
        elif key < node.key:
            node.left = self._insert(node.left, key)
        else:
            node.right = self._insert(node.right, key)

        node.height = 1 + max(self._get_height(node.left), self._get_height(node.right))

        balance = self._get_balance(node)

        if balance > 1 and key < node.left.key:
            return self._right_rotate(node)
        if balance < -1 and key > node.right.key:
            return self._left_rotate(node)
        if balance > 1 and key > node.left.key:
            node.left = self._left_rotate(node.left)
            return self._right_rotate(node)
        if balance < -1 and key < node.right.key:
            node.right = self._right_rotate(node.right)
            return self._left_rotate(node)

        return node

    def delete(self, key):
        if not self.root:
            return
        else:
            self.root = self._delete(self.root, key)

    def _delete(self, node, key):
        if not node:
            return node
        elif key < node.key:
            node.left = self._delete(node.left, key)
        elif key > node.key:
            node.right = self._delete(node.right, key)
        else:
            if not node.left:
                return node.right
            elif not node.right:
                return node.left

            temp = self._get_min_value_node(node.right)
            node.key = temp.key
            node.right = self._delete(node.right, temp.key)

        if not node:
            return node

        node.height = 1 + max(self._get_height(node.left), self._get_height(node.right))

        balance = self._get_balance(node)

        if balance > 1 and self._get_balance(node.left) >= 0:
            return self._right_rotate(node)
        if balance < -1 and self._get_balance(node.right) <= 0:
            return self._left_rotate(node)
        if balance > 1 and self._get_balance(node.left) < 0:
            node.left = self._left_rotate(node.left)
            return self._right_rotate(node)
        if balance < -1 and self._get_balance(node.right) > 0:
            node.right = self._right_rotate(node.right)
            return self._left_rotate(node)

        return node

    def search(self, key):
        return self._search(self.root, key)

    def _search(self, node, key):
        if not node or node.key == key:
            return node
        elif key < node.key:
            return self._search(node.left, key)
        else:
            return self._search(node.right, key)

    def _left_rotate(self, z):
        y = z.right
        T2 = y.left

        y.left = z
        z.right = T2

        z.height = 1 + max(self._get_height(z.left), self._get_height(z.right))
        y.height = 1 + max(self._get_height(y.left), self._get_height(y.right))

        return y

    def _right_rotate(self, z):
        y = z.left
        T3 = y.right

        y.right = z
        z.left = T3

        z.height = 1 + max(self._get_height(z.left), self._get_height(z.right))
        y.height = 1 + max(self._get_height(y.left), self._get_height(y.right))

        return y

    def _get_height(self, node):
        if not node:
            return 0
        return node.height

    def _get_balance(self, node):
        if not node:
            return 0
        return self._get_height(node.left) - self._get_height(node.right)

    def _get_min_value_node(self, root):
        if root is None or root.left is None:
            return root
        return self._get_min_value_node(root.left)

    def inorder_traversal(self):
        res = []
        if not self.root:
            return res
        else:
            res = self._inorder_traversal_helper(self.root)
            return res

    def _inorder_traversal_helper(self, root):
        res = []
        if root is not None:
            res = res + self._inorder_traversal_helper(root.left)
            res.append(root.key)
            res = res + self._inorder_traversal_helper(root.right)
        return res

# Test the implementation
avl_tree = AVLTree()
avl_tree.insert(50)
avl_tree.insert(30)
avl_tree.insert(20)
avl_tree.insert(40)
avl_tree.insert(70)
avl_tree.insert(60)
avl_tree.insert(80)

print("Inorder traversal of the AVL Tree:", avl_tree.inorder_traversal())

print("Search for 40:", avl_tree.search(40).key if avl_tree.search(40) else "Not found")
print("Search for 90:", avl_tree.search(90).key if avl_tree.search(90) else "Not found")

avl_tree.delete(20)
print("Inorder traversal after deleting 20:", avl_tree.inorder_traversal())

avl_tree.delete(30)
print("Inorder traversal after deleting 30:", avl_tree.inorder_traversal())

avl_tree.delete(50)
print("Inorder traversal after deleting 50:", avl_tree.inorder_traversal())

[OUTPUT]
Inorder traversal of the AVL Tree: [20, 30, 40, 50, 60, 70, 80]
Search for 40: 40
Search for 90: Not found
Inorder traversal after deleting 20: [30, 40, 50, 60, 70, 80]
Inorder traversal after deleting 30: [40, 50, 60, 70, 80]
Inorder traversal after deleting 50: [40, 60, 70, 80]
